plugins {
    //it needs Spring Boot & Spring Dependency Management plugin,
    //otherwise, it cannot use dependencies of Spring Boot for the java application
    //user Spring Boot plugin means this project can be build as image with a technology called Cloud Native Buildpacks (CNB)
    //with this plugin, the jar will be build into 4 layer by default, u can use java -Djarmode=layertools -jar xxx.jar list/extract  to list/extract the layer
    //u can also customer layer, please refer to bootJar script
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    //it needs Java plugin, otherwise, it cannot build the java application
    id 'java'
    id 'eclipse'
}


//to specify the JDK version
sourceCompatibility = '17'

// used by command line runner
//bootRun {
//	standardInput = System.in
//}

group 'org.example.test'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    //implementation('org.springframework.boot:spring-boot-starter-data-jpa')//for JPA, it needs database configure, otherwise, the application will fail to start
    //implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")//for session repository to save session to Redis
    implementation("org.springframework.session:spring-session-data-redis")//for session
    //Spring application will perform authentication automatically once the Spring Security is added into application
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.security.oauth:spring-security-oauth2:2.0.12.RELEASE")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:2.7.0")

    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.retry:spring-retry:1.3.3")


    compileOnly("org.projectlombok:lombok:1.18.20")
    annotationProcessor("org.projectlombok:lombok:1.18.20")

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation("com.google.guava:guava:31.1-jre")
    implementation("org.apache.commons:commons-lang3:3.6")
    implementation("commons-io:commons-io:2.11.0")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5")
    implementation("com.fasterxml.jackson.module:jackson-module-afterburner")
    implementation("com.fasterxml.jackson.module:jackson-module-parameter-names")

    implementation("org.apache.httpcomponents:httpclient:4.5.13")
    implementation("org.apache.httpcomponents:httpcore:4.4.14")
    implementation("org.apache.httpcomponents:httpcomponents-core:4.4.14")
    // https://mvnrepository.com/artifact/org.json/json
    implementation("org.json:json:20220320")

    implementation("org.zalando:problem-spring-web:0.26.2")

    implementation("com.squareup.okhttp3:okhttp:4.9.3")

    implementation("net.sf.jasperreports:jasperreports:6.20.0")
    implementation("com.lowagie:itext:2.1.7")//required dependency for Jasper
    //if missing this library, it will throw java.lang.ClassNotFoundException: org.mozilla.javascript.EvaluatorException for Jasper
    implementation("org.mozilla:rhino:1.7R4")
    implementation("org.apache.poi:poi:5.2.2")//for export excel file by Jasper


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}
/*
bootJar {
    archiveFileName = "test.jar"
    layered {
        enabled = true
        application {
            intoLayer("external-dependencies") {
                include "org/springframework/boot/loader/**"
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("application") {
                includeProjectDependencies()
            }
            intoLayer("internal-dependencies") {
                include "hk.gov.cedb.tsw:*:*" //for included private library
            }
            intoLayer("external-dependencies")
        }
        layerOrder = ["external-dependencies", "internal-dependencies", "application"]
    }
}*/